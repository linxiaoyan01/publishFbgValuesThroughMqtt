<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.kaluna.pub.mapper.FbgValueMapper">
  <resultMap id="BaseResultMap" type="top.kaluna.pub.domain.FbgValue">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="physical_value_info_id" jdbcType="BIGINT" property="physicalValueInfoId" />
    <result column="value" jdbcType="DECIMAL" property="value" />
    <result column="tag" jdbcType="TINYINT" property="tag" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, physical_value_info_id, `value`, tag, create_time
  </sql>
  <select id="selectByExample" parameterType="top.kaluna.pub.domain.FbgValueExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from fbg_value
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from fbg_value
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from fbg_value
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="top.kaluna.pub.domain.FbgValueExample">
    delete from fbg_value
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="top.kaluna.pub.domain.FbgValue">
    insert into fbg_value (id, physical_value_info_id, `value`, 
      tag, create_time)
    values (#{id,jdbcType=BIGINT}, #{physicalValueInfoId,jdbcType=BIGINT}, #{value,jdbcType=DECIMAL}, 
      #{tag,jdbcType=TINYINT}, #{createTime,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="top.kaluna.pub.domain.FbgValue">
    insert into fbg_value
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="physicalValueInfoId != null">
        physical_value_info_id,
      </if>
      <if test="value != null">
        `value`,
      </if>
      <if test="tag != null">
        tag,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="physicalValueInfoId != null">
        #{physicalValueInfoId,jdbcType=BIGINT},
      </if>
      <if test="value != null">
        #{value,jdbcType=DECIMAL},
      </if>
      <if test="tag != null">
        #{tag,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="top.kaluna.pub.domain.FbgValueExample" resultType="java.lang.Long">
    select count(*) from fbg_value
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update fbg_value
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.physicalValueInfoId != null">
        physical_value_info_id = #{record.physicalValueInfoId,jdbcType=BIGINT},
      </if>
      <if test="record.value != null">
        `value` = #{record.value,jdbcType=DECIMAL},
      </if>
      <if test="record.tag != null">
        tag = #{record.tag,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update fbg_value
    set id = #{record.id,jdbcType=BIGINT},
      physical_value_info_id = #{record.physicalValueInfoId,jdbcType=BIGINT},
      `value` = #{record.value,jdbcType=DECIMAL},
      tag = #{record.tag,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="top.kaluna.pub.domain.FbgValue">
    update fbg_value
    <set>
      <if test="physicalValueInfoId != null">
        physical_value_info_id = #{physicalValueInfoId,jdbcType=BIGINT},
      </if>
      <if test="value != null">
        `value` = #{value,jdbcType=DECIMAL},
      </if>
      <if test="tag != null">
        tag = #{tag,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="top.kaluna.pub.domain.FbgValue">
    update fbg_value
    set physical_value_info_id = #{physicalValueInfoId,jdbcType=BIGINT},
      `value` = #{value,jdbcType=DECIMAL},
      tag = #{tag,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectForAbnormal" parameterType="Long" resultType="top.kaluna.pub.domain.FbgValue">
    select * from fbg_value a left join fbg_value_info b
    on a.physical_value_info_id = b.id
    where a.value not between b.min
    and a.create_time between #{startTime} and #{endTime}
    and b.max order by a.create_time
  </select>
  <insert id="multipleInsert">
    insert into fbg_value
    (physical_value_info_id, value, tag, create_time)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.physical_value_info_id},#{item.value},#{item.tag},#{item.create_time})
    </foreach>
  </insert>
  <select id="temperatureNow" resultType="java.math.BigDecimal">
    select value from fbg_value a left join fbg_value_info b
    on a.physical_value_info_id = b.id
    where b.category = 2 order by a.create_time desc limit 1;
  </select>
</mapper>